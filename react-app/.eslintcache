[{"/home/shaun/dev/Intermusicality/react-app/src/index.js":"1","/home/shaun/dev/Intermusicality/react-app/src/App.js":"2","/home/shaun/dev/Intermusicality/react-app/src/reportWebVitals.js":"3"},{"size":543,"mtime":1609500851647,"results":"4","hashOfConfig":"5"},{"size":2696,"mtime":1609501753857,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609189256051,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1y6q51t",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/home/shaun/dev/Intermusicality/react-app/src/index.js",[],["17","18"],"/home/shaun/dev/Intermusicality/react-app/src/App.js",["19","20"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MIDISounds from \"midi-sounds-react\";\nimport tones from \"./tones.json\";\nimport triads from \"./triads.json\";\nimport parent_sets from \"./parent_sets.json\";\nimport metadata from \"./mela_meta.json\";\n\nimport { Card, Button } from \"semantic-ui-react\";\n\nconsole.log(metadata);\n// const INSTRUMENT = 124; // Marimba\nconst INSTRUMENT = 3; // Piano\nconst ROOT = 58;\nconst NOTES = [60, 62, 64, 66];\nconst b = 0.35;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  playTones = (idx) => {\n    this.midiSounds.setMasterVolume(0.4);\n    var when = this.midiSounds.contextTime();\n    const notes = tones[idx].map((i) => ROOT + i);\n    notes.forEach((n, idx) => {\n      this.midiSounds.playChordAt(when + b * idx, INSTRUMENT, [n], 0.8 * b);\n    });\n  };\n\n  playTriads = (i) => {\n    const tr = triads[i];\n    const t = tones[i];\n\n    this.midiSounds.setMasterVolume(0.4);\n    var when = this.midiSounds.contextTime();\n\n    console.log(tr);\n    const notes = tr.map((triad, i) => [\n      ROOT + t[i],\n      ROOT + t[i] + triad[0],\n      ROOT + t[i] + triad[0] + triad[1],\n    ]);\n    console.log(notes);\n\n    notes.forEach((n, idx) => {\n      this.midiSounds.playChordAt(when + b * idx, INSTRUMENT, n, 0.8 * b);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>All Melakartas</h2>\n        <p>\n          <Card.Group>\n            {triads.map((tr, i) => (\n              <Card>\n                <Card.Header>\n                  {i + 1}: {metadata[i][\"Name\"]}\n                </Card.Header>\n                {/* <Card.Content>\n                  {tones[i].join(\", \")}\n                  <br />\n                  {triads[i].join(\", \")}\n                </Card.Content> */}\n                <Button.Group>\n                  <Button basic color=\"grey\" onClick={() => this.playTones(i)}>\n                    Tones\n                  </Button>\n                  <Button basic color=\"grey\" onClick={() => this.playTriads(i)}>\n                    Chords\n                  </Button>\n                </Button.Group>\n              </Card>\n            ))}\n          </Card.Group>\n        </p>\n\n        <h2>Parent scales</h2>\n\n        {parent_sets.map((mela_idxs, i) => (\n          <p>\n            {i}:<span> </span>\n            {mela_idxs.map((mela_idx) => (\n              <button onClick={() => this.playTriads(mela_idx)}>\n                {mela_idx + 1}\n              </button>\n            ))}\n          </p>\n        ))}\n\n        <MIDISounds\n          ref={(ref) => (this.midiSounds = ref)}\n          appElementName=\"root\"\n          instruments={[3, 124]}\n        />\n      </div>\n    );\n  }\n}\n",["21","22"],"/home/shaun/dev/Intermusicality/react-app/src/reportWebVitals.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":15,"column":7,"nodeType":"29","messageId":"30","endLine":15,"endColumn":12},{"ruleId":"31","severity":1,"message":"32","line":19,"column":3,"nodeType":"33","messageId":"34","endLine":21,"endColumn":4},{"ruleId":"23","replacedBy":"35"},{"ruleId":"25","replacedBy":"36"},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'NOTES' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["37"],["38"],"no-global-assign","no-unsafe-negation"]